name: Build and Release Raylib Project

on:
  push:

jobs:
  build_and_release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    # 1. Pobranie kodu źródłowego
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Instalacja zależności dla Linux
    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build build-essential libgl1-mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev

    # 3. Instalacja zależności dla Windows
    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Instalacja CMake
        curl -LO https://github.com/Kitware/CMake/releases/download/v3.27.2/cmake-3.27.2-windows-x86_64.msi
        msiexec /i cmake-3.27.2-windows-x86_64.msi /quiet /norestart

        # Instalacja Ninja
        curl -LO https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-win.zip
        unzip ninja-win.zip -d C:\ninja
        setx PATH "%PATH%;C:\ninja"

    # 4. Instalacja zależności dla macOS
    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake ninja

    # 5. Konfiguracja projektu
    - name: Configure CMake
      run: |
        cmake -B build -G Ninja

    # 6. Kompilacja projektu
    - name: Build project
      run: |
        cmake --build build

    # 7. Pakowanie wyników w ZIP
    - name: Package the build
      run: |
        mkdir release
        cp build/untitled release/
        zip -j untitled-${{ matrix.os }}.zip release/untitled

    # 8. Przesłanie artefaktów jako ZIP
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: untitled-${{ matrix.os }}
        path: untitled-${{ matrix.os }}.zip

    # 9. Tworzenie lub aktualizacja draft release
    - name: Create or Update Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        tag_name: nightly-build
        release_name: Nightly Build
        draft: true
        prerelease: true

    # 10. Dodanie ZIP do Release
    - name: Upload ZIP to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: untitled-${{ matrix.os }}.zip
        asset_name: untitled-${{ matrix.os }}.zip
        asset_content_type: application/zip
